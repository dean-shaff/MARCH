
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  description: 'description',
  location: 'location',
  yearCompleted: 'yearCompleted',
  typology: 'typology',
  authorEmail: 'authorEmail',
  selectedForCompetition: 'selectedForCompetition',
  area: 'area'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  projectId: 'projectId',
  aiTags: 'aiTags',
  credit: 'credit'
};

exports.Prisma.StakeholderScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  website: 'website',
  location: 'location',
  email: 'email',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  url: 'url',
  supplierId: 'supplierId',
  tags: 'tags',
  certifications: 'certifications'
};

exports.Prisma.ProjectMaterialScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  projectId: 'projectId',
  usedWhere: 'usedWhere'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.BUILDING_TYPOLOGY = exports.$Enums.BUILDING_TYPOLOGY = {
  RESIDENTIAL: 'RESIDENTIAL',
  COMMERCIAL: 'COMMERCIAL',
  INDUSTRIAL: 'INDUSTRIAL',
  INSTITUTIONAL: 'INSTITUTIONAL'
};

exports.STAKEHOLDER_TYPE = exports.$Enums.STAKEHOLDER_TYPE = {
  ARCHITECT: 'ARCHITECT',
  CONTRACTOR: 'CONTRACTOR',
  ENGINEER: 'ENGINEER'
};

exports.Prisma.ModelName = {
  Project: 'Project',
  Image: 'Image',
  Stakeholder: 'Stakeholder',
  Supplier: 'Supplier',
  Material: 'Material',
  ProjectMaterial: 'ProjectMaterial'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/alexservie/tech-stuff/March/march-app/prisma/generated/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters"
    ],
    "sourceFilePath": "/Users/alexservie/tech-stuff/March/march-app/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.7.0",
  "engineVersion": "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": "postgresql://neondb_owner:npg_Y2dweAomOJ1B@ep-hidden-rice-a29btqs3-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require"
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n  output          = \"./generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Project {\n  id                     String            @id @default(cuid())\n  createdAt              DateTime          @default(now()) @db.Timestamp(6)\n  title                  String\n  description            String?\n  location               String\n  yearCompleted          Int\n  typology               BUILDING_TYPOLOGY\n  authorEmail            String\n  selectedForCompetition Boolean           @default(false)\n  images                 Image[]\n  projectMaterial        ProjectMaterial[] @relation(\"MaterialToProject\")\n  materials              Material[]\n  stakeholders           Stakeholder[]\n  area                   Int?\n}\n\nmodel Image {\n  id        String     @id @default(cuid())\n  url       String\n  projectId String\n  project   Project    @relation(fields: [projectId], references: [id])\n  aiTags    String[]\n  materials Material[]\n  credit    String?\n}\n\nmodel Stakeholder {\n  id          String           @id @default(cuid())\n  type        STAKEHOLDER_TYPE\n  name        String\n  email       String[]\n  phoneNumber String[]\n  projects    Project[]\n}\n\nmodel Supplier {\n  id          String     @id @default(cuid())\n  name        String\n  website     String?\n  location    String?\n  email       String[]\n  phoneNumber String[]\n  materials   Material[]\n}\n\nmodel Material {\n  id               String            @id @default(cuid())\n  name             String\n  description      String\n  url              String\n  supplierId       String\n  supplier         Supplier          @relation(fields: [supplierId], references: [id])\n  projectMaterials ProjectMaterial[] @relation(\"MaterialToProject\")\n  projects         Project[]\n  images           Image[]\n  tags             String[] //characteristics, ex. natural, reused\n  certifications   String[]\n}\n\nmodel ProjectMaterial {\n  id         String   @id @default(cuid())\n  materialId String\n  projectId  String\n  usedWhere  String\n  material   Material @relation(\"MaterialToProject\", fields: [materialId], references: [id])\n  project    Project  @relation(\"MaterialToProject\", fields: [projectId], references: [id])\n}\n\nenum BUILDING_TYPOLOGY {\n  RESIDENTIAL\n  COMMERCIAL\n  INDUSTRIAL\n  INSTITUTIONAL\n}\n\nenum STAKEHOLDER_TYPE {\n  ARCHITECT\n  CONTRACTOR\n  ENGINEER\n}\n",
  "inlineSchemaHash": "4e160d8c6b2698b1b881c16b1a3c8d5b544e3da9fb03e6306cbfb71cd5221896",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"yearCompleted\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"typology\",\"kind\":\"enum\",\"type\":\"BUILDING_TYPOLOGY\"},{\"name\":\"authorEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"selectedForCompetition\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"images\",\"kind\":\"object\",\"type\":\"Image\",\"relationName\":\"ImageToProject\"},{\"name\":\"projectMaterial\",\"kind\":\"object\",\"type\":\"ProjectMaterial\",\"relationName\":\"MaterialToProject\"},{\"name\":\"materials\",\"kind\":\"object\",\"type\":\"Material\",\"relationName\":\"MaterialToProject\"},{\"name\":\"stakeholders\",\"kind\":\"object\",\"type\":\"Stakeholder\",\"relationName\":\"ProjectToStakeholder\"},{\"name\":\"area\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Image\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ImageToProject\"},{\"name\":\"aiTags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"materials\",\"kind\":\"object\",\"type\":\"Material\",\"relationName\":\"ImageToMaterial\"},{\"name\":\"credit\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Stakeholder\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"STAKEHOLDER_TYPE\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToStakeholder\"}],\"dbName\":null},\"Supplier\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"materials\",\"kind\":\"object\",\"type\":\"Material\",\"relationName\":\"MaterialToSupplier\"}],\"dbName\":null},\"Material\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supplierId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supplier\",\"kind\":\"object\",\"type\":\"Supplier\",\"relationName\":\"MaterialToSupplier\"},{\"name\":\"projectMaterials\",\"kind\":\"object\",\"type\":\"ProjectMaterial\",\"relationName\":\"MaterialToProject\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"MaterialToProject\"},{\"name\":\"images\",\"kind\":\"object\",\"type\":\"Image\",\"relationName\":\"ImageToMaterial\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"certifications\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"ProjectMaterial\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"materialId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"usedWhere\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"material\",\"kind\":\"object\",\"type\":\"Material\",\"relationName\":\"MaterialToProject\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"MaterialToProject\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

